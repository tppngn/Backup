#!/bin/bash

# Clear current firewall rules so only these rules will take affect
/sbin/iptables -F

# Drop this specific MAC source address
/sbin/iptables -A FORWARD -m mac --mac-source 00:00:39:da:55:99 -j DROP

# Drop this specific IP traffic no matter if it is the source (s) or destination (d) IP
/sbin/iptables -A FORWARD -s 192.168.1.149 -j DROP
/sbin/iptables -A FORWARD -d 192.168.1.149 -j DROP

# Drop ports 69 and 135 both incoming and outgoing and udp and tcp:
# sport stands for source port
# dport stands for destination port

/sbin/iptables -A FORWARD -p udp --sport 69 -j DROP
/sbin/iptables -A FORWARD -p udp --dport 69 -j DROP
/sbin/iptables -A FORWARD -p tcp --sport 69 -j DROP
/sbin/iptables -A FORWARD -p tcp --dport 69 -j DROP

/sbin/iptables -A FORWARD -p udp --sport 135 -j DROP
/sbin/iptables -A FORWARD -p udp --dport 135 -j DROP
/sbin/iptables -A FORWARD -p tcp --sport 135 -j DROP
/sbin/iptables -A FORWARD -p tcp --dport 135 -j DROP
------------------------------------------------------------------------------------------

######## This firewall rules script is used to help protect the
######## NetEq unit itself from outside access
######## The rules shown below do not affect the
######## traffic going "THROUGH" the unit, only
######## TO and FROM the unit IP 
########
######## Use the next lines to clear the firewall
IPTABLES=/sbin/iptables
$IPTABLES -P INPUT ACCEPT
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD ACCEPT
$IPTABLES -F
$IPTABLES -X

######## EDIT BETWEEN THIS MARK
######## PS: you may want to include your DNS server
# allow the NetEq unit to get input from these:
$IPTABLES -A INPUT -s 192.168.1.117 -j ACCEPT
$IPTABLES -A INPUT -s 66.179.134.7 -j ACCEPT

# allow the NetEq unit to send output to these:
$IPTABLES -A OUTPUT -d 192.168.1.117 -j ACCEPT
$IPTABLES -A OUTPUT -d 66.179.134.7 -j ACCEPT
########
######## AND THIS MARK

#drop all other input and output
$IPTABLES -A INPUT -j DROP
$IPTABLES -A OUTPUT -j DROP
---------------------------------------------------------------------------------

#!/bin/sh
# version 2.45
# define physical interfaces
LANPORT1="eth0"
LANPORT2="eth1"

#############################
# firewall for NetEQ        #
#############################
# NetEQ's IP address
MYIP="192.168.1.143/32"
# entire network
OUR_NETWORK="192.168.1.0/24"

# to permit management of NetEQ from ANY IP, set MAN0 line
# to 0.0.0.0/0, otherwise change it to the specific IP which you
# want to have access. Change MAN1-MAN3 lines for additional
# management connections.
# management permitted from ->.3
MAN0="192.168.1.3/32"
# management permitted from ->.85
MAN1="192.168.1.85/32"
# management permitted from ->.181
MAN2="192.168.1.181/32"
# management permitted from ->.10
MAN3="192.168.1.10/32"

# non-authenticated MACs get re-directed to
redirectip="192.168.1.7"
redirectport="999"

# enable IP Forwarding between interfaces
echo "1" > /proc/sys/net/ipv4/ip_forward

# disable pings
#echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all
#echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# clean up and initialize iptables
IPTABLES=/sbin/iptables
# accept ALL FORWARD traffic initially
# by setting default policy of table to "ACCEPT"
$IPTABLES -P FORWARD ACCEPT
# management port as well
$IPTABLES -P INPUT ACCEPT
$IPTABLES -P OUTPUT ACCEPT

# 'F'lush tables
$IPTABLES -F
$IPTABLES -X
$IPTABLES -t nat -F
$IPTABLES -t nat -X
$IPTABLES -t mangle -F
$IPTABLES -t mangle -X

# suck in all client MAC #s and names .. names are not used
cat /etc/macs.allow | while read  MAC NAME  ; do
$IPTABLES -t mangle -A PREROUTING -i my -m physdev --physdev-in $LANPORT2 -m mac --mac-source $MAC -j MARK --set-mark 0x42
done

# momentarily allow all web traffic through the prerouting table
# until the firewall script has completed (re)loading
$IPTABLES -t nat -A PREROUTING -p tcp --dport 80 -j ACCEPT

# do not redirect http packets destined to the neteq management interface
$IPTABLES -t nat -A PREROUTING -p tcp -d $MYIP --dport 80 -j ACCEPT
# do not redirect http packets that are in the macs.allow file (marked)
$IPTABLES -t nat -A PREROUTING -p tcp --dport 80 -m mark --mark 0x42 -j ACCEPT
# redirects http packets that are NOT in the macs.allow file coming in from eth1 (internal)
$IPTABLES -t nat -A PREROUTING -i my -m physdev --physdev-in $LANPORT2 -p tcp --dport 80 -j DNAT --to $redirectip:$redirectport

#######################################
# setup management port accessibility #
#######################################
# SSH port 22
$IPTABLES -A INPUT -p tcp -s $MAN0 -d $MYIP --dport 22 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN1 -d $MYIP --dport 22 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN2 -d $MYIP --dport 22 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN3 -d $MYIP --dport 22 -j ACCEPT
# drop any SSH management packets which weren't permitted above
$IPTABLES -A INPUT -p tcp -d $MYIP --dport 22 -j DROP

# HTTP port 80
$IPTABLES -A INPUT -p tcp -s $MAN0 -d $MYIP --dport 80 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN1 -d $MYIP --dport 80 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN2 -d $MYIP --dport 80 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN3 -d $MYIP --dport 80 -j ACCEPT
# drop any HTTP management packets which weren't permitted above
$IPTABLES -A INPUT -p tcp -d $MYIP --dport 80 -j DROP

# NTOP port 3000
$IPTABLES -A INPUT -p tcp -s $MAN0 -d $MYIP --dport 3000 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN1 -d $MYIP --dport 3000 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN2 -d $MYIP --dport 3000 -j ACCEPT
$IPTABLES -A INPUT -p tcp -s $MAN3 -d $MYIP --dport 3000 -j ACCEPT
# drop any NTOP management packets which weren't permitted above
$IPTABLES -A INPUT -p tcp -d $MYIP --dport 3000 -j DROP

# allow all previously established traffic in any direction
$IPTABLES -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT

# allow outbound SYN packets from the hosts in the macs.allow file
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -m mark --mark 0x42 -m state --state NEW -j ACCEPT

# always let pings thru
$IPTABLES -A FORWARD -p icmp --icmp-type 255 -j ACCEPT

# always let DNS requests thru
$IPTABLES -A FORWARD -p tcp --dport 53 -j ACCEPT
$IPTABLES -A FORWARD -p udp --dport 53 -j ACCEPT

# always let DHCP requests thru
$IPTABLES -A FORWARD -p tcp --dport 67 -j ACCEPT
$IPTABLES -A FORWARD -p udp --dport 67 -j ACCEPT
$IPTABLES -A FORWARD -p tcp --dport 68 -j ACCEPT
$IPTABLES -A FORWARD -p udp --dport 68 -j ACCEPT


#################################################
# the following IPs are running routers and/or  #
# want the outside world to have access to them #
#################################################
# router1
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.3 -j ACCEPT
# router2
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.10 -j ACCEPT
# router3
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.11 -j ACCEPT
# router4
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.12 -j ACCEPT
# router5
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.13 -j ACCEPT
# router6
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.14 -j ACCEPT
# router7
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.250 -j ACCEPT
# router8
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.252 -j ACCEPT
# router9
$IPTABLES -A FORWARD -i my -m physdev --physdev-in $LANPORT2 --physdev-out $LANPORT1 -d 10.0.0.253 -j ACCEPT

# allow all http traffic to and from the captive portal
$IPTABLES -A FORWARD -p tcp -s $redirectip --sport $redirectport -j ACCEPT
$IPTABLES -A FORWARD -p tcp -d $redirectip --dport $redirectport -j ACCEPT

# start the redirect of all port 80 traffic not in the macs.allow file
$IPTABLES -t nat -D PREROUTING 1

# finally,  DROP anything not previously accepted
$IPTABLES -P FORWARD DROP

#
# EOF